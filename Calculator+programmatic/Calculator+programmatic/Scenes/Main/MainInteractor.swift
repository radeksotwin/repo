//
//  MainInteractor.swift
//  Calculator+programmatic
//
//  Created by Rdm on 09/02/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainBusinessLogic {
    func performOperation(request: Main.PerformOperation.Request)
    func numberPadButtonTapped(request: Main.PerformOperation.Request)
}

protocol MainDataStore {
    var accumulator: Double? { get set }
    var displayedData: String { get set }
    var userIsInTheMiddleOfTheTyping: Bool { get set }
    var operations: Dictionary<String, Main.Operation> { get }
    var pendingBinaryOperation: Main.PendingBinaryOperation? { get set }
}

class MainInteractor: MainBusinessLogic, MainDataStore {
    
    var presenter: MainPresentationLogic?
    var worker: MainWorker?

    var accumulator: Double?
    var displayedData: String = ""
    var userIsInTheMiddleOfTheTyping: Bool = false
    var pendingBinaryOperation: Main.PendingBinaryOperation?
    
    var operations: Dictionary<String, Main.Operation> = [
        "π": Main.Operation.constant(Double.pi),
        "√": Main.Operation.unaryOperation(sqrt),
        "cos": Main.Operation.unaryOperation(cos),
        "⁺∕₋": Main.Operation.unaryOperation({ -$0 }),
        "×": Main.Operation.binaryOperation(*),
        "÷": Main.Operation.binaryOperation(/),
        "+": Main.Operation.binaryOperation(+),
        "-": Main.Operation.binaryOperation(-),
        "=": Main.Operation.equals,
        "AC": Main.Operation.clear
    ]
    
    
    func performOperation(request: Main.PerformOperation.Request) {
        
        guard let operation = operations[request.text] else { return }
        
        if userIsInTheMiddleOfTheTyping == true {
            guard let value = Double(displayedData) else { return }
            accumulator = value
            
            userIsInTheMiddleOfTheTyping = false
        }
        
        switch operation {
        case .constant(let value) :
            accumulator = value
        case .unaryOperation(let f):
            if let operand = accumulator {
                accumulator = f(operand)
                displayedData = String(describing: accumulator!)
            }
        case .binaryOperation(let f):
            if accumulator != nil {
                pendingBinaryOperation = Main.PendingBinaryOperation(function: f, firstOperand: accumulator!)
                accumulator = nil
            }
        case .equals:
            guard pendingBinaryOperation != nil && accumulator != nil else { return }
            accumulator = pendingBinaryOperation!.perform(with: accumulator!)
            displayedData = String(describing: accumulator!)
            pendingBinaryOperation = nil
        case .clear:
            accumulator = nil
            displayedData = "0"
        default:
            break
        }
        
        let response = Main.PerformOperation.Response(text: displayedData)
        presenter?.presentResults(response: response)
    }
    
    func numberPadButtonTapped(request: Main.PerformOperation.Request) {
        if userIsInTheMiddleOfTheTyping == true {
            displayedData.append(request.text)
        } else {
            displayedData = request.text
            userIsInTheMiddleOfTheTyping = true
        }
        
        let response = Main.PerformOperation.Response(text: displayedData)
        presenter?.presentResults(response: response)
    }

}
